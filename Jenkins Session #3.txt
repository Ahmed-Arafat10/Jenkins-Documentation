===================
Jenkins #3 Session:
===================


-> If you want to create more than one pipeline from different branches in a GitHub repo then
use {multibranch pipeline}, its configuration is same as pipeline but after you give it the GitHub repo
URL, it will automatically iterate over all other branches and then create a pipelene
for each branch that has a {Jenkinsfile} in it {this is just the difference}
- This will be more efficient if you have a lot of pipelines you want to create


*********************
Git-Flow Architecture
*********************

    Feature  Develop  Release  Testing   Production   Master   Hotfix
    Branch   Branch   Branch   Branch      Branch     Branch   Branch


***************************
Master & Node Architecture
***************************
--> Instead of deploying all pipelines & Jenkins server on one master node, make Jenkins
dashboard only runs on master node and other pipelines are sun on separated servers


What We Will Do ??
-> create two slave nodes, one on 1) AWS and other in 2) Docker Container
of Ubuntu image {Where I can build pipelines on}

---------------
1) STEPS for AWS:
---------------
- Open your AWS account and then create EC2 instance for Ubuntu {Default configurtation}

- After downloading key pair from AWS take a copy from it and then change permission to 400
$ cp ~/Downloads/key_pair_name.pem  <new_path>
$ chmod 400 key_pair_name.pem

- Then copy instance public IPv4 address and SSH it
$ ssh -i key_pair_name.pem ubuntu@IPv4_Address
-> ubuntu : username of EC2 instance image {Ubuntu 20 in this case}

- To make any server a slave for Jenkins I need to install first open-jdk and to have
SSH {Private key} then create a Dir. in which Jenkins server can save pipelines in it {workspace Dir. that containes pipelines} ,
all of this will be done in slave server {Ubuntu AWS instance after SSH it}
$ apt update
$ apt-get install openjdk-8-jdk     {run it inside Ubuntu instance}
$ mkdir Jenkins

- Go to {Jenkins dashboard} > {manage nodes and clouds} > {new node} > then name it and
enable {permanent agent} option then hit okay button

- In {remote root directory} choose path in which Jenkins will save files in it
{in this case its /home/Ubuntu/Jenkins} -> Jenkins here is a Dir. created when we were inside
Ubuntu instance after SSH it, then give it a label {AWS in this example}
in launch method choose {launch agent via SSH}

Host -> copy AWS EC2 instance public IPv4 Address

Credential -> add SSH credential data {just press Add button}, its type is {SSH name with private key}
username -> ubuntu
ID -> any name {SSH-AWS-Slave in this case}
private key {choose enter directly} -> key is stored in key_pair_name.pem which has been
downloaded from AWS website, take WHOLE text copy and but it in input

Host key verification strategy -> Non verifying verification strategy
Then hit go

- After node is built go to {new items} and then create a pipeline, in pipeline script
choose {GitHub + maven} but change {agent any} in groovy code to :
agent {label "SSH-AWS-Slave"} // SSH-AWS-Slave is name{label} of node

But to build this example go to {global tool configuration} menu and add Maven named [M3] as in pipeline script

- Advantage of Slave node is that if created pipeline drop down server, EC2 will be dropped down not Jenkins server



-----------------------------------------------------------------
2) Configure a docker container to be slave for Jenkins server
-----------------------------------------------------------------

- Run a container from Ubuntu image
$ docker run -it ubuntu bash

- SAME STEPS as 1) AWS: to make any server a slave for Jenkins I need to install first
open-jdk and to have SSh {Private key} then create a dir to make a Jenkins send files to it,
all of this is in slave server{ubuntu AWS after ssh it}
$ sudo apt update
$ sudo apt-get install openjdk-8-jdk     {run it inside Ubuntu container}

- Create a Dir. in which Jenkins server can save pipelines in it {workspace Dir. that contains pipelines}
$ mkdir Jenkins

- As this is a docker container, SSH is not installed on it
$ service ssh status
-> O/P ssh : unrecognized service

so install it first
$ apt install openssh-server

- After installing it enable SSH service
$ service ssh start

- To generate a key pair for SSH {public key {kalon bta3 elserver ely hn3mloh access} & private key {mofta7}}
$ ssh-keygen
$ cd ~/.ssh
$ ls
O/P  -> id_rsa   id_rsa.pub        .pub -> public

- Take private key {mofta7 for Jenkins} and copy it to use it in Jenkins Credential menu
$ cat id_rsa

- Copy public key and then create a file called {authorized_keys} in [~/.ssh]
$ apt install vim
$ cat id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDZhAHQByxFivAFZGH6Whyybh3kFoD6Ek3G8ymWj2nQNc2+w/ZvzvohvZ8aHGoFghvTGU/GO0GIHbfHYfb/uAkI9bipiLvWIXGZjQS6I8bqbLrjLt3Kso+RgHhrYa3du+KR4FQoF3zaGKOR82QC1lXsAYaHXzanvNAdl/M5brcYQOkgfDItBkinvPcmPmXcF+eilHNmOZOok3SvjZoCXbxMYX2gvAhuEeFrvkrFYgfZ8xiEHj1xgIzISZPQlNKCKnsa2m8+faBdlvaGYtV6Lwra3OkamUkVRLrS+uldM8W94xvs2S4zw7RwjktozGP0ojn2C0w8KIyKlqU4u4Pdns1PDcizpZZRED9xydMlLOvMv7v4C0qDycn1d0lAGLH/tiUjiUJlBwfGEvL/eIi5V9GftwW0Xq4RAoDxZLNOD8zwVNfWTRXlPlrq8i0o0l031UTed5yafE5J2W2Yv1Jq/+tMAi0sNIs+87z9j5SbirSSliFTd4SaXFulHjEb/zE0k= root@f0dcb60c5c10
but withou (root@f0dcb60c5c10)
$ vi authorized_keys
paste public key in it then enter :wq!

- In Jenkins go to manage {credential menu} select {SSH username with private key} give it
an id -> container-slave-SSH
username -> root {must be same user we have written command in terminal with}
private key -> from id_rsa file {inside Ubuntu container}


- Then add new node name it {docker} and give it a directory {/root/Jenkins}
label -> docker
in launch method choose {launch agent via SSH}
Host -> Ubuntu docker container ID

- List all running containers
$ docker ps
-> Then take container ID of ubuntu container {this command inside terminal not inside ubuntu container root}
then run
$ docker inspect <Container_ID>
-> In network section copy IPAddress
Credential -> add SSH credential data {just press Add button}, its type is {SSH name with private key}
username -> root
ID -> any name {SSH-Docker-Ubuntu-Slave in this case}
private key {choose enter directly} -> written on LINE 113
- Then just select its username from list shown {username -> root}

Host key verification strategy -> Non verifying verification strategy
then hit go


- After node is built go to new items and then create a pipeline,
in pipeline script choose {GitHub + maven} but change {agent any} in groovy code to :
agent {label "docker"} // docker is name{label} of node

but to build this pipeline go to {global tool configuration} menu and add Maven named [M3]

NOTE: install Git inside Ubuntu container as git command is used in groovy script to prevent happening of an error


---------------------------------------------
TASK: create an Ubuntu slave docker container
---------------------------------------------
but this time from dockerfile to automate everything {in dockerfile make new Dir./
install openjdk / install ssh /generate keys / add public key to authorized_keys etc...}
+ installing a docker CLI in it {add statements of dockerfile that install docker
client on container from previous session}
so Jenkinsfile can run docker commands inside ubuntu container
do not forget to Edit ---> agent {label "Slave_Name"} in Jenkinsfile


-> So this is to have a dockerfile then build it to create an image then just take
its IPaddress and put it in nodes configurations in Jenkins Server {other steps are all automated}



-> Then create a script to :
1) Copy file that contains private key from docker container to my host to use it in jenkins
$ docker cp <ContainerID>:~/.ssh/id_rsa /home/arafat/Desktop/jenkinsproject
2- to copy ipaddress of container
$ docker inspect <ContainerID> > IPAddress

script.sh file :
docker cp $1:~/.ssh/id_rsa /home/arafat/Desktop/jenkinsproject
docker inspect $1 > IPAddress

In terminal :
source script.sh <Container_ID>


When you ssh a server $ ssh -i sprint.pem ubuntu@IPAddress then a message will pop up in terminal then you typed yes
there is a file created in ~/.ssh called known_hosts thet contains all server you have connected to , which means that you have trusted this server
next time you ssh on this server no message will be shown
this is meaning of {Host key verification strategy -> Non verifying verification strategy } option
(as I entered yes for that message)


To Be Continued Extensions (Easy) Part 2 --------------------------------------------------


----------------------------------------------------
Integration between Jenkins and notification tools {slack}
----------------------------------------------------
- To make pipelines post their status periodically

- Go to {mange Jenkins} > {plug-in manager} > then add {slack notification} plug-in

- Go to slack.com or app installed on Windows, login then create a workspace inside workspace
create a channel, press on channel name choose {settings & administration > manage apps}
in {description includes} search for {Jenkins CI} then enter it then press
{add to slack} then choose channel you want Jenkins to connect with {channel #test in this example}

- Then go to {Jenkins server} > {manage Jenkins} > {configure system} > then go to slack section
-> For workspace add {team subdomain} from slack website
-> For credential -> press add button choose {secret text} then in {secret} input paste
from slack website copy token from {Integration Token Credential ID}
ID -> any name {slack in this example}
then press add button to add credential
Default channel/member id -> add channel name
then press {Test Connection} to make sure its connected successfully
then save

- How to use it now?

1) for freesytle:
    -> in {post-build actions} -> slack notifications

2) for pipeline:
    -> in config script for descriptive script
        CODE:
        post{
          success{
            slackSend(color:"#00ffcc",message: "pipeline succeeded")//Green
            }
            // failure not for syntax errors in scrip , its as for example $ docker command in pipeline that dont installed in it docker CLI
            failure{
            slackSend(color:"#cc3300",message: "pipeline failed")//Red
            }
        }



-------------------------------
Auditing plug-in -> who did what
-------------------------------

- Go to mange Jenkins > plug-in manager > then add {audit log} plug-in

- {Audit logs} menu will appears in Jenkins server dashboard , press it then press on audit.html


-----------------------------------
GitHub Actions : See 47:25 in Video
-> No Need To write anything
-----------------------------------

- Some advanced topics in Jenkins -> shared libraries {not included in internship content}




========
Project:
========

for Booster_CI_CD_Project -> Create CI/CD pipeline using jenkinsfile to deploy simple django web app
                             as a microservice running on docker container locally

    -Requirements:
    -> Create a dockerfile to create a modified image from ubuntu {See Line #160}
    -> Check that everything in Docker container of modified ubuntu image is working fine
    -> Create a salve node in Jenkins Server then link it with Ubuntu Docker container
    -> Create dockerfile in GitHub repo of project that will create a Django image from ubuntu base image
    -> Create a Jenkinsfile that will execute 5 stages {in Readme file of repo}
        Note: Each pipeline from them will have different port (change jenkinsfile $ docker run -p porting for each branch)
    -> Create a multibranch and link it with GitHub repo using git
    -> Create two pipelines {From multibranch} then make sure that they are deployed successfully
    -> check two Django Web apps
    -> Check that created Django docker image is pushed into your Docker Hub Account
    -> Check that a message is sent to slack
    -> Install a plug-in to show statistics of builds in Jenkins Server

    - How to present project -> in a PDF file :
                            -> Put link of repo in your GitHub Account
                            -> Screenshot of successfully pipelines created
                            -> Screenshot of statistics plug-ins
                            -> Screenshot of slack notification when pipelines are deployed
                            -> Screenshot of working Django website
